name: CI/CD Pipeline for Spring Boot App

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '21'
  SONAR_PROJECT_KEY: Jessica-creat_APISpringBoot-   # Doit matcher SonarCloud
  SONAR_ORGANIZATION: jessdock517

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build application
        run: mvn -B clean compile

      - name: Run unit tests with coverage
        run: mvn -B test jacoco:report

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

      - name: Run Sonar analysis with Maven
        run: |
          mvn -B compile
          mvn -B sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Docker tag
        run: |
          echo "Tag utilisé : ${{ secrets.DOCKERHUB_USERNAME }}/apispringboot:latest"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/apispringboot:latest

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/apispringboot:latest
            docker stop apispringboot || true
            docker rm apispringboot || true
            docker run -d --name apispringboot -p 80:8080 ${{ secrets.DOCKERHUB_USERNAME }}/apispringboot:latest
            docker image prune -f
            echo " Déploiement réussi !"

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.EC2_HOST }}/api/v1/products || exit 1
